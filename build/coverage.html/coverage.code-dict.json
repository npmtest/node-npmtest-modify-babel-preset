{"/home/travis/build/npmtest/node-npmtest-modify-babel-preset/test.js":"/* istanbul instrument in package npmtest_modify_babel_preset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/lib.npmtest_modify_babel_preset.js":"/* istanbul instrument in package npmtest_modify_babel_preset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_modify_babel_preset = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_modify_babel_preset = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-modify-babel-preset && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_modify_babel_preset */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_modify_babel_preset\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_modify_babel_preset.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_modify_babel_preset.rollup.js'] =\n            local.assetsDict['/assets.npmtest_modify_babel_preset.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_modify_babel_preset.__dirname + '/lib.npmtest_modify_babel_preset.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/node_modules/modify-babel-preset/index.js":"var path = require('path');\nvar relative = require('require-relative');\nvar serialize = require('./lib/serialize');\nvar getFlattenedPlugins = require('./lib/flatten');\nvar normalizePreset = require('./lib/normalize-preset');\n\n// strip a nested module path + filename down to just the innermost module's (file)name\nfunction getModuleName(path) {\n\treturn path.replace(/(?:..[\\\\/])*(?:(?:.+[\\\\/])?node_modules[\\\\/]|[\\\\/]|\\.\\.[\\\\/])((@[^\\\\/]+[\\\\/])?[^\\\\/]+)([\\\\/].*)?$/g, '$1');\n}\n\n\nfunction setHiddenProp(obj, prop, value) {\n\tif (Object.defineProperty) {\n\t\tObject.defineProperty(obj, prop, {\n\t\t\tenumerable: false,\n\t\t\twritable: true,\n\t\t\tvalue: value\n\t\t});\n\t}\n\telse {\n\t\tobj[prop] = value;\n\t}\n}\n\n\nfunction extend(base, props) {\n\tfor (var i in props) if (props.hasOwnProperty(i)) {\n\t\tbase[i] = props[i];\n\t}\n\treturn base;\n}\n\n\nfunction requireBabelPlugin(name, relativeTo) {\n\tif (!name.match(/^babel-plugin-/)) {\n\t\tname = 'babel-plugin-' + name;\n\t}\n\n\tvar relativeName;\n\tif (relativeTo) {\n\t\ttry {\n\t\t\trelativeName = relative.resolve(name, relativeTo);\n\t\t} catch (err) {}\n\t}\n\tif (!relativeName) {\n\t\ttry {\n\t\t\trelativeName = require.resolve(name);\n\t\t} catch(err) {}\n\t}\n\n\tname = relativeName || name;\n\n\treturn { mod:require(name), name:name };\n}\n\n\nmodule.exports = function(presetInput, modifications) {\n\tvar options = {};\n\n\tif (Array.isArray(presetInput)) {\n\t\toptions = presetInput[1];\n\t\tpresetInput = presetInput[0];\n\t}\n\tmodifications = modifications || {};\n\n\tvar preset;\n\tif (typeof presetInput==='string') {\n\t\tif (!presetInput.match(/(^babel-preset-|[\\\\/])/)) {\n\t\t\ttry {\n\t\t\t\tpreset = relative.resolve('babel-preset-'+presetInput, __dirname);\n\t\t\t} catch(err) {\n\t\t\t\tconsole.log(err);\n\t\t\t}\n\t\t}\n\t\tif (!preset) {\n\t\t\tpreset = require.resolve(presetInput);\n\t\t}\n\t}\n\n\tpreset = path.resolve(preset);\n\n\tvar presetModule = normalizePreset(require(preset), null, options);\n\n\tvar orig = presetModule['modify-babel-preset'];\n\tif (orig) {\n\t\tconsole.log('Found nested modify-babel-preset configuration, flattening.');\n\t\treturn modify(orig.preset, extend(extend({}, orig.modifications), modifications));\n\t}\n\n\tvar cwd = path.dirname(preset) || process.cwd();\n\n\t// console.log('cwd: ', cwd);\n\n\tvar serialized = serialize(preset, {\n\t\toptions: options,\n\t\tcwd: cwd\n\t});\n\n\tvar alias = serialized.alias;\n\tvar plugins = getFlattenedPlugins(serialized);\n\n\tfunction isSameName(a, b) {\n\t\tif (typeof a!=='string' || typeof b!=='string') return false;\n\t\treturn a.replace(/^babel-plugin-/i, '').toLowerCase() === b.replace(/^babel-plugin-/i, '').toLowerCase();\n\t}\n\n\tfunction indexOf(plugins, key) {\n\t\tfor (var i=plugins.length; i--; ) {\n\t\t\tvar mod = Array.isArray(plugins[i]) ? plugins[i][0] : plugins[i];\n\t\t\tvar name = typeof mod==='string' && getModuleName(mod) || mod._original_name;\n\t\t\tname = alias[name] || name;\n\t\t\tif (isSameName(name, key)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tObject.keys(modifications).forEach(function(key) {\n\t\tif (key==='nameDrops' || key==='string') return;\n\n\t\tvar value = modifications[key],\n\t\t\tindex = indexOf(plugins, key);\n\t\tif (value===false) {\n\t\t\tif (index!==-1) {\n\t\t\t\tplugins.splice(index, 1);\n\t\t\t}\n\t\t\telse if (process.env.NODE_ENV==='development') {\n\t\t\t\tconsole.warn(key+' not found', __dirname);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tvar imported = requireBabelPlugin(key, cwd),\n\t\t\t\tp = imported.mod;\n\t\t\tsetHiddenProp(p, '_original_name', imported.name);\n\t\t\tif (value!==true) {\n\t\t\t\tp = [p].concat(value);\n\t\t\t}\n\t\t\tif (index<0) {\n\t\t\t\tplugins.push(p);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tplugins[index] = p;\n\t\t\t}\n\t\t}\n\t});\n\n\tif (modifications.string!==true) {\n\t\tplugins = plugins.map(function(plugin) {\n\t\t\tvar mod = Array.isArray(plugin) ? plugin[0] : plugin;\n\t\t\tif (typeof mod==='string') {\n\t\t\t\tvar p = path.resolve(cwd, mod);\n\t\t\t\tmod = require(p);\n\t\t\t\tsetHiddenProp(mod, '_original_name', p);\n\t\t\t}\n\t\t\treturn Array.isArray(plugin) ? [mod].concat(plugin.slice(1)) : mod;\n\t\t});\n\t}\n\n\tvar out = { plugins:plugins };\n\n\tsetHiddenProp(out, 'modify-babel-preset', {\n\t\tpreset: path.dirname(path.resolve(preset)),\n\t\tmodifications: modifications\n\t});\n\n\treturn out;\n};\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/node_modules/modify-babel-preset/lib/serialize.js":"var fs = require('fs');\nvar path = require('path');\nvar requireRelative = require('require-relative');\nvar normalizePreset = require('./normalize-preset');\nvar join = path.join;\nvar dirname = path.dirname;\nvar relative = path.relative;\n\nfunction getModulePath(filepath) {\n\treturn filepath.replace(/(.*([\\\\/]node_modules|\\.\\.)[\\\\/](@[^\\\\/]+[\\\\/])?[^\\\\/]+)([\\\\/].*)?$/g, '$1')\n}\n\n// Attempt to require a module, returning false on error\nfunction req(name) {\n\ttry {\n\t\treturn require(name);\n\t} catch (err) {\n\t\treturn false;\n\t}\n}\n\n// Attempt to resolve a module, returning `undefined` on error\nfunction resolve(name, relativeTo) {\n\tvar path = false;\n\ttry {\n\t\tpath = requireRelative.resolve(name, relativeTo);\n\t} catch (err) {\n\t\tconsole.log('resolve failed for \"'+name+'\": '+err);\n\t}\n\treturn path;\n}\n\n// fast npm always use symlink\n// and it resulted in module duplicated\n// or alias\nfunction fillAliasMap(path, list, map) {\n\treturn list.reduce(function (symlinkedList, mod) {\n\t\tvar realPath = relative(path, fs.realpathSync(join(path, mod)));\n\t\tif (realPath !== mod) {\n\t\t\tsymlinkedList[realPath] = (mod);\n\t\t}\n\t\treturn symlinkedList;\n\t}, map || {});\n}\n\n// Get a list of child module names for the given module path\nfunction getChildren(path, type, alias) {\n\tvar modules;\n\ttry {\n\t\tmodules = fs.readdirSync(join(path, 'node_modules'));\n\t} catch (err) {\n\t\tpath = path.replace(/([\\\\/]node_modules)([\\\\/].*)?$/g, '$1');\n\t\tmodules = fs.readdirSync(path);\n\t}\n\tvar children =  (modules || [])\n\t\t.filter( realFile )\n\t\t.sort( reverseSorter(type==='plugin' ? isPlugin : isPreset) );\n\tfillAliasMap(path, children, alias);\n\treturn children;\n}\n\n// is a filename an actual file\nfunction realFile(f) {\n\treturn f && f.charAt(0)!=='.';\n}\n\n// ascending sort based on the truthiness of a function\nfunction reverseSorter(comparison) {\n\treturn function(a, b) {\n\t\tvar ca = comparison(a),\n\t\t\tcb = comparison(b);\n\t\treturn ca===cb ? 0 : (ca ? 1 : cb ? -1 : 0);\n\t}\n}\n\nfunction isPreset(name) { return name && name.match(/^babel\\-preset\\-/g); }\n\nfunction isPlugin(name) { return name && name.match(/^babel\\-plugin\\-/g); }\n\n// find the matching module *instance* in a list of module paths, remove and return it\nfunction findAndRemove(preset, path, list) {\n\tfor (var i=list.length; i--; ) {\n\t\tvar p = resolve(list[i], path),\n\t\t\tv = p && req(p);\n\t\tif (v && v===preset) {\n\t\t\tlist.splice(i, 1);\n\t\t\treturn p;\n\t\t}\n\t}\n}\n\n/** Resolve & serialize a Babel preset to a filename-based representation.\n *\tNested filepaths are relative to `relativeTo` if specified.\n *\tPresets referenced as Strings (uncommon) are treated as dependencies of the preset that returned them.\n */\nfunction loadPreset(name, opts, relativeTo) {\n\tvar path = resolve(name, relativeTo),\n\t\tmod = normalizePreset(path && req(path), null, opts.options);\n\tif (!mod) throw new Error('Preset \"'+name+'\" not found.');\n\n\tpath = dirname(path);\n\n\tvar out = {\n\t\talias: {}\n\t};\n\tif (mod.presets) {\n\t\tvar availablePresets = getChildren(path, 'preset', out.alias);\n\t\tout.presets = mod.presets.map(function(preset) {\n\t\t\tif (typeof preset!=='string') {\n\t\t\t\tpreset = findAndRemove(preset, path, availablePresets);\n\t\t\t}\n\t\t\treturn loadPreset(preset, opts, path);\n\t\t});\n\t}\n\n\tif (mod.plugins) {\n\t\tvar availablePlugins = getChildren(path, 'plugin', out.alias);\n\t\tout.plugins = mod.plugins.map(function(plugin) {\n\t\t\tvar name = Array.isArray(plugin) ? plugin[0] : plugin;\n\t\t\tif (typeof name!=='string') {\n\t\t\t\tif (name._original_name) {\n\t\t\t\t\t// console.log('using _original_name: ', name._original_name);\n\t\t\t\t\tname = name._original_name;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tname = findAndRemove(name, path, availablePlugins);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!name) return plugin;\n\n\t\t\tname = resolve(name, path);\n\t\t\tname = getModulePath(name);\n\t\t\tif (opts) {\n\t\t\t\tif (opts.cwd) name = relative(opts.cwd, name);\n\t\t\t\tif (opts.transform) name = opts.transform(name);\n\t\t\t}\n\t\t\treturn Array.isArray(plugin) ? [name].concat(plugin.slice(1)) : name;\n\t\t});\n\t}\n\treturn out;\n}\n\nmodule.exports = loadPreset;\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/node_modules/modify-babel-preset/lib/normalize-preset.js":"var babelCore;\ntry { babelCore = require('babel-core'); } catch(err) {}\n\nmodule.exports = function normalizePreset(preset, context, options) {\n\tif (!context) context = babelCore;\n\n\tif (preset && typeof preset==='object' && preset.buildPreset) {\n\t\tpreset = preset.buildPreset;\n\t}\n\n\tif (typeof preset==='function') {\n\t\tpreset = preset(context, options || {});\n\t}\n\n\treturn preset;\n};\n","/home/travis/build/npmtest/node-npmtest-modify-babel-preset/node_modules/modify-babel-preset/lib/flatten.js":"module.exports = function flatten(preset) {\n\tvar plugins = [].concat(preset.plugins || []);\n\n\t(preset.presets || []).forEach(function(child) {\n\t\tvar children = flatten(child);\n\t\tif (children) plugins = plugins.concat(children);\n\t});\n\n\treturn plugins;\n};\n"}